/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.healthanalystrole;

import business.Constants;
import business.HelperMethods;
import business.data.FoodConsumptionDetail;
import business.data.VitalSign;
import business.organization.Organization;
import business.person.FamilyMember;
import business.result.NutrientsCheckResult;
import business.result.VitalSignCheckResult;
import business.useraccount.UserAccount;
import business.workqueue.HealthCheckRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author JAHNVI
 */
public class ProcessRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private UserAccount userAccount;
    private HealthCheckRequest request;
    private CheckMyAssignedRequestJPanel checkMyAssignedPanel;
    
    /**
     * Creates new form ProcessRequestJPanel
     */
    
    public ProcessRequestJPanel() {
        initComponents();
    }
    
    public ProcessRequestJPanel(JPanel userProcessContainer, Organization organization, UserAccount userAccount, HealthCheckRequest request, CheckMyAssignedRequestJPanel checkMyAssignedPanel) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.userAccount = userAccount;
        this.request = request;
        this.checkMyAssignedPanel = checkMyAssignedPanel;
        displayDetails();
    }

    public void displayDetails() {
        welcomeNameLbl.setText(welcomeNameLbl.getText().replace("<Name>", userAccount.getPerson().getFirstName() + " " + userAccount.getPerson().getLastName()));
        
        requestDateLbl.setText(HelperMethods.getFormattedDate(request.getRequestDate()));
        
        senderNameLbl.setText(request.getSender().getPerson().getFirstName() + " " + request.getSender().getPerson().getLastName());
        msgTxtLbl.setText(request.getMessage());
        
        populateVitalSignTable();
        populateFcdTable();
    }
    
    public void populateVitalSignTable() {
        DefaultTableModel dtm = (DefaultTableModel) vitalSignTable.getModel();
        dtm.setRowCount(0);
        
        for (VitalSign vs : request.getVitalSignsList()) {
            Object row[] = new Object[9];
            row[0] = vs;
            row[1] = vs.getTemperature();
            row[2] = vs.getSystolicBp();
            row[3] = vs.getDiastolicBp();
            row[4] = vs.getPulse();
            row[5] = vs.getRespiratoryRate();
            row[6] = vs.getCholesterol();
            row[7] = vs.getBloodSugar();
            row[8] = vs.getBmi();
            
            dtm.addRow(row);
        }
    }
    
    public void populateFcdTable() {
        DefaultTableModel dtm = (DefaultTableModel) fcdTable.getModel();
        dtm.setRowCount(0);
        
        for (FoodConsumptionDetail fcd : request.getFcdList()) {
            Object row[] = new Object[15];
            row[0] = fcd;
            row[1] = fcd.getEnergy();
            row[2] = fcd.getProtien();
            row[3] = fcd.getCarbohydrates();
            row[4] = fcd.getFat();
            row[5] = fcd.getFibers();
            row[6] = fcd.getSugar();
            row[7] = fcd.getSalt();
            row[8] = fcd.getIodine();
            row[9] = fcd.getVitaminA();
            row[10] = fcd.getVitaminB12();
            row[11] = fcd.getVitaminC();
            row[12] = fcd.getVitaminD();
            row[13] = fcd.getVitaminE();
            row[14] = fcd.getVitaminK();
            
            dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeNameLbl = new javax.swing.JLabel();
        welcomeLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        requestDtLbl = new javax.swing.JLabel();
        requestDateLbl = new javax.swing.JLabel();
        senderLbl = new javax.swing.JLabel();
        senderNameLbl = new javax.swing.JLabel();
        msgLbl = new javax.swing.JLabel();
        msgTxtLbl = new javax.swing.JLabel();
        vsLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vitalSignTable = new javax.swing.JTable();
        fcdLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fcdTable = new javax.swing.JTable();
        viewVsReportBtn = new javax.swing.JButton();
        viewFcReport = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        affectedVsLbl = new javax.swing.JLabel();
        tempCheck = new javax.swing.JCheckBox();
        sysBpCheck = new javax.swing.JCheckBox();
        diaBpCheck = new javax.swing.JCheckBox();
        bloodSugarCheck = new javax.swing.JCheckBox();
        respRateCheck = new javax.swing.JCheckBox();
        pulseCheck = new javax.swing.JCheckBox();
        bmiCheck = new javax.swing.JCheckBox();
        cholesterolCheck = new javax.swing.JCheckBox();
        affectedNutrientsLbl = new javax.swing.JLabel();
        energyCheck = new javax.swing.JCheckBox();
        protienCheck = new javax.swing.JCheckBox();
        fatCheck = new javax.swing.JCheckBox();
        carboCheck = new javax.swing.JCheckBox();
        iodineCheck = new javax.swing.JCheckBox();
        sugarCheck = new javax.swing.JCheckBox();
        saltCheck = new javax.swing.JCheckBox();
        fibersCheck = new javax.swing.JCheckBox();
        vitACheck = new javax.swing.JCheckBox();
        vitB12Check = new javax.swing.JCheckBox();
        vitCCheck = new javax.swing.JCheckBox();
        vitDCheck = new javax.swing.JCheckBox();
        vitECheck = new javax.swing.JCheckBox();
        vitKCheck = new javax.swing.JCheckBox();
        submitResultsBtn = new javax.swing.JButton();

        welcomeNameLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        welcomeNameLbl.setText("<Name>!");

        welcomeLbl.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        welcomeLbl.setText("Welcome,");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLbl.setText("Health Analyst - Process Requests");

        requestDtLbl.setText("Request Date:");

        requestDateLbl.setText("<Request Date>");
        requestDateLbl.setEnabled(false);

        senderLbl.setText("Sender:");

        senderNameLbl.setText("<Sender Name>");
        senderNameLbl.setEnabled(false);

        msgLbl.setText("Message:");

        msgTxtLbl.setText("<Message>");
        msgTxtLbl.setEnabled(false);

        vsLbl.setText("Vital Signs:");

        vitalSignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Time", "Temp.", "Sys. BP", "Dia. SP", "Pulse", "Resp. Rate", "Cholesterol", "Blood Sugar", "BMI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vitalSignTable);
        if (vitalSignTable.getColumnModel().getColumnCount() > 0) {
            vitalSignTable.getColumnModel().getColumn(0).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(1).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(2).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(3).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(4).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(5).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(6).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(7).setResizable(false);
            vitalSignTable.getColumnModel().getColumn(8).setResizable(false);
        }

        fcdLbl.setText("Food Consumption Details:");

        fcdTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Time", "Energy", "Protien", "Carbo.", "Fat", "Fibers", "Sugar", "Salt", "Iodine", "Vit A", "Vit B12", "Vit C", "Vit D", "Vit E", "Vit K"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(fcdTable);
        if (fcdTable.getColumnModel().getColumnCount() > 0) {
            fcdTable.getColumnModel().getColumn(0).setResizable(false);
            fcdTable.getColumnModel().getColumn(1).setResizable(false);
            fcdTable.getColumnModel().getColumn(2).setResizable(false);
            fcdTable.getColumnModel().getColumn(3).setResizable(false);
            fcdTable.getColumnModel().getColumn(4).setResizable(false);
            fcdTable.getColumnModel().getColumn(5).setResizable(false);
            fcdTable.getColumnModel().getColumn(6).setResizable(false);
            fcdTable.getColumnModel().getColumn(7).setResizable(false);
            fcdTable.getColumnModel().getColumn(8).setResizable(false);
            fcdTable.getColumnModel().getColumn(9).setResizable(false);
            fcdTable.getColumnModel().getColumn(10).setResizable(false);
            fcdTable.getColumnModel().getColumn(11).setResizable(false);
            fcdTable.getColumnModel().getColumn(12).setResizable(false);
            fcdTable.getColumnModel().getColumn(13).setResizable(false);
            fcdTable.getColumnModel().getColumn(14).setResizable(false);
        }

        viewVsReportBtn.setText("View Vital Sign Report");
        viewVsReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewVsReportBtnActionPerformed(evt);
            }
        });

        viewFcReport.setText("View Nutrients Report");
        viewFcReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFcReportActionPerformed(evt);
            }
        });

        backBtn.setText("<<  Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        affectedVsLbl.setText("Affected Vital Signs:");

        tempCheck.setText("Temp");

        sysBpCheck.setText("Sys. BP");

        diaBpCheck.setText("Dia. BP");

        bloodSugarCheck.setText("Sugar");

        respRateCheck.setText("Resp.Rate");

        pulseCheck.setText("Pulse");

        bmiCheck.setText("BMI");

        cholesterolCheck.setText("Cholesterol");

        affectedNutrientsLbl.setText("Affected Nurients:");

        energyCheck.setText("Energy");

        protienCheck.setText("Protien");

        fatCheck.setText("Fat");

        carboCheck.setText("Carbohydrates");

        iodineCheck.setText("Iodine");

        sugarCheck.setText("Sugar");

        saltCheck.setText("Salt");

        fibersCheck.setText("Fibers");

        vitACheck.setText("Vitamin A");

        vitB12Check.setText("Vitamin B12");

        vitCCheck.setText("Vitamin C");

        vitDCheck.setText("Vitamin D");

        vitECheck.setText("Vitamin E");

        vitKCheck.setText("Vitamin K");

        submitResultsBtn.setText("Submit Results");
        submitResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitResultsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(affectedVsLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(energyCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(protienCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fatCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(carboCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iodineCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sugarCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saltCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fibersCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tempCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sysBpCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(diaBpCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bloodSugarCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(respRateCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pulseCheck)
                                .addGap(4, 4, 4)
                                .addComponent(bmiCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cholesterolCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(vitACheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitB12Check)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitCCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitDCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitECheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitKCheck))
                            .addComponent(affectedNutrientsLbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(fcdLbl)))
                .addGap(0, 124, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitResultsBtn)
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(msgLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msgTxtLbl))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(requestDtLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(requestDateLbl)
                                .addGap(132, 132, 132)
                                .addComponent(senderLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(senderNameLbl))
                            .addComponent(vsLbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(viewVsReportBtn)
                        .addGap(61, 61, 61)
                        .addComponent(viewFcReport))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(titleLbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcomeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeNameLbl)
                .addGap(128, 128, 128))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcomeLbl)
                    .addComponent(welcomeNameLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestDtLbl)
                    .addComponent(requestDateLbl)
                    .addComponent(senderLbl)
                    .addComponent(senderNameLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msgLbl)
                    .addComponent(msgTxtLbl))
                .addGap(18, 18, 18)
                .addComponent(vsLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(fcdLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewVsReportBtn)
                    .addComponent(viewFcReport))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(affectedVsLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tempCheck)
                            .addComponent(sysBpCheck)
                            .addComponent(diaBpCheck)
                            .addComponent(bloodSugarCheck)
                            .addComponent(respRateCheck)
                            .addComponent(pulseCheck)
                            .addComponent(bmiCheck)
                            .addComponent(cholesterolCheck))
                        .addGap(26, 26, 26)
                        .addComponent(affectedNutrientsLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(energyCheck)
                            .addComponent(protienCheck)
                            .addComponent(fatCheck)
                            .addComponent(carboCheck)
                            .addComponent(iodineCheck)
                            .addComponent(sugarCheck)
                            .addComponent(saltCheck)
                            .addComponent(fibersCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vitACheck)
                            .addComponent(vitB12Check)
                            .addComponent(vitCCheck)
                            .addComponent(vitDCheck)
                            .addComponent(vitECheck)
                            .addComponent(vitKCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(submitResultsBtn)
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backBtn)
                        .addGap(20, 20, 20))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        
        ArrayList<String> status = new ArrayList<>();
        status.add(Constants.REQUEST_ASSIGNED);
        
        ArrayList<HealthCheckRequest> reqList = (ArrayList) userAccount.getWorkQueue().searchRequestByStatusOnly(status);
        checkMyAssignedPanel.populateRequestTable(reqList);
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewVsReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewVsReportBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<VitalSign> vitalSignList = request.getVitalSignsList();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                
        for (VitalSign vs : vitalSignList) {
            Double temprature = Double.parseDouble(String.valueOf(vs.getTemperature()));
            Double sysBp = Double.parseDouble(String.valueOf(vs.getSystolicBp()));
            Double diaBp = Double.parseDouble(String.valueOf(vs.getDiastolicBp()));
            Double respRate = Double.parseDouble(String.valueOf(vs.getRespiratoryRate()));
            Double pulse = Double.parseDouble(String.valueOf(vs.getPulse()));
            Double bloodSugar = Double.parseDouble(String.valueOf(vs.getBloodSugar()));
            Double cholesterol = Double.parseDouble(String.valueOf(vs.getCholesterol()));
            Double bmi = Double.parseDouble(String.valueOf(vs.getBmi()));
            
            dataset.addValue(temprature, "Temperature", vs.getTimestamp());
            dataset.addValue(sysBp, "Systolic BP", vs.getTimestamp());
            dataset.addValue(diaBp, "Diastolic BP", vs.getTimestamp());
            dataset.addValue(respRate, "Respiration Rate", vs.getTimestamp());
            dataset.addValue(pulse, "Pulse", vs.getTimestamp());
            dataset.addValue(bloodSugar, "Blood Sugar", vs.getTimestamp());
            dataset.addValue(cholesterol, "Cholesterol;", vs.getTimestamp());
            dataset.addValue(bmi, "BMI", vs.getTimestamp());
        }        
        
        JFreeChart chart = ChartFactory.createBarChart("Vital Sign Report", "Vital Signs", "Values", dataset);
        //JFreeChart chart = ChartFactory.createBarChart("Vital Sign Report", "Vital Signs", "Values", dataset, PlotOrientation.VERTICAL, true, true, false);
        
        final CategoryPlot plot = chart.getCategoryPlot();
        
        BarRenderer barRenderer = (BarRenderer) plot.getRenderer();
        DecimalFormat decimalFormat = new DecimalFormat("####.##");
        barRenderer.setItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}", decimalFormat));
        plot.setRenderer(barRenderer);
        barRenderer.setPositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.HALF_ASCENT_CENTER));
        barRenderer.setItemLabelsVisible(true);
        chart.getCategoryPlot().setRenderer(barRenderer);
        
        ChartFrame frame = new ChartFrame("Vital Sign Report", chart);
        frame.setVisible(true);
        frame.setSize(650, 650);
    }//GEN-LAST:event_viewVsReportBtnActionPerformed

    private void viewFcReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFcReportActionPerformed
        // TODO add your handling code here:
        ArrayList<FoodConsumptionDetail> fcdList = request.getFcdList();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        for (FoodConsumptionDetail fcd : fcdList) {
            Double energy = Double.parseDouble(String.valueOf(fcd.getEnergy()));
            Double protien = Double.parseDouble(String.valueOf(fcd.getProtien()));
            Double fat = Double.parseDouble(String.valueOf(fcd.getFat()));
            Double carbo = Double.parseDouble(String.valueOf(fcd.getCarbohydrates()));
            Double fibers = Double.parseDouble(String.valueOf(fcd.getFibers()));
            Double sugar = Double.parseDouble(String.valueOf(fcd.getSugar()));
            Double salt = Double.parseDouble(String.valueOf(fcd.getSalt()));
            Double iodine = Double.parseDouble(String.valueOf(fcd.getIodine()));
            Double vitA = Double.parseDouble(String.valueOf(fcd.getVitaminA()));
            Double vitB12 = Double.parseDouble(String.valueOf(fcd.getVitaminB12()));
            Double vitC = Double.parseDouble(String.valueOf(fcd.getVitaminC()));
            Double vitD = Double.parseDouble(String.valueOf(fcd.getVitaminD()));
            Double vitE = Double.parseDouble(String.valueOf(fcd.getVitaminE()));
            Double vitK = Double.parseDouble(String.valueOf(fcd.getVitaminK()));
            
            dataset.addValue(energy, "Energy", fcd.getTimestamp());
            dataset.addValue(protien, "Protien", fcd.getTimestamp());
            dataset.addValue(fat, "Fat", fcd.getTimestamp());
            dataset.addValue(carbo, "Carbohydrates", fcd.getTimestamp());
            dataset.addValue(fibers, "Fibers", fcd.getTimestamp());
            dataset.addValue(sugar, "Sugar", fcd.getTimestamp());
            dataset.addValue(salt, "Salt", fcd.getTimestamp());
            dataset.addValue(iodine, "Iodine", fcd.getTimestamp());
            dataset.addValue(vitA, "Vitamin A", fcd.getTimestamp());
            dataset.addValue(vitB12, "Vitamin B12", fcd.getTimestamp());
            dataset.addValue(vitC, "Vitamin C", fcd.getTimestamp());
            dataset.addValue(vitD, "VItamin D", fcd.getTimestamp());
            dataset.addValue(vitE, "Vitamin E", fcd.getTimestamp());
            dataset.addValue(vitK, "Vitamin K", fcd.getTimestamp());            
        }
        
        JFreeChart chart = ChartFactory.createBarChart("Nutrients Report", "Nutrients", "Values", dataset);
       
        final CategoryPlot plot = chart.getCategoryPlot();
        
        BarRenderer barRenderer = (BarRenderer) plot.getRenderer();
        DecimalFormat decimalFormat = new DecimalFormat("####.##");
        barRenderer.setItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}", decimalFormat));
        plot.setRenderer(barRenderer);
        barRenderer.setPositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.HALF_ASCENT_CENTER));
        barRenderer.setItemLabelsVisible(true);
        chart.getCategoryPlot().setRenderer(barRenderer);
        
        ChartFrame frame = new ChartFrame("Nutrients Report", chart);
        frame.setVisible(true);
        frame.setSize(650, 650);
    }//GEN-LAST:event_viewFcReportActionPerformed

    private void submitResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitResultsBtnActionPerformed
        // TODO add your handling code here:
        request.getResultData().setVitalSignResultList(setAffectedVitalSigns()); 
        request.getResultData().setNutrientResultList(setAffectedNutrients()); 
        
        if (request.getResultData().getNutrientResultList().isEmpty() || request.getResultData().getVitalSignResultList().isEmpty()) {
            request.setResult("Health is maintained properly.");
        }
        else {
            request.setResult("Health is affected.");
        }
        
        request.setStatus(Constants.REQUEST_COMPLETED);
        request.setResponseDate(new Date());
       
        JOptionPane.showMessageDialog(null, "Request has been completed!", "Information", JOptionPane.INFORMATION_MESSAGE);
        submitResultsBtn.setEnabled(false);
    }//GEN-LAST:event_submitResultsBtnActionPerformed
    
    public ArrayList<VitalSignCheckResult> setAffectedVitalSigns() {
        ArrayList<VitalSignCheckResult> vsCheckResultList = new ArrayList<>();
        VitalSignCheckResult vsResult;
        
        if (tempCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalTemp = 0;
            for (VitalSign vs : request.getVitalSignsList()) {
                totalTemp = totalTemp + vs.getTemperature();
            }
            
            float temp = totalTemp/request.getVitalSignsList().size();
            
            vsResult.setVsName("Temperature");   
            vsResult.setAvgValue(temp);
            vsResult.setIsVsNormal(HelperMethods.checkIfTempNormal(temp));
            vsResult.setEffect(HelperMethods.getTempStatus(temp));
            vsCheckResultList.add(vsResult);
        }
        
        if (sysBpCheck.isSelected() || diaBpCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalSysBp = 0;
            float totalDiaBp = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalSysBp = totalSysBp + vs.getSystolicBp();
                totalDiaBp = totalDiaBp + vs.getDiastolicBp();
            }
            
            float sysBp = totalSysBp/request.getVitalSignsList().size();
            float diaBp = totalDiaBp/request.getVitalSignsList().size();
            
            FamilyMember member = (FamilyMember) request.getSender().getPerson();
            
            if (sysBpCheck.isSelected()) {
                vsResult.setVsName("Systolic Blood Pressure");
                vsResult.setAvgValue(sysBp);
                vsResult.setIsVsNormal(HelperMethods.checkIfBpNormal(member.getAge(), (int) sysBp, (int) diaBp));
                vsResult.setEffect(HelperMethods.getBloodPressureStatus((int) sysBp, (int) diaBp));
                
                vsCheckResultList.add(vsResult);
            }
            
            if(diaBpCheck.isSelected()) {
                vsResult.setVsName("Diastolic Blood Pressure");
                vsResult.setAvgValue(diaBp);
                vsResult.setIsVsNormal(HelperMethods.checkIfBpNormal(member.getAge(), (int) sysBp, (int) diaBp));
                vsResult.setEffect(HelperMethods.getBloodPressureStatus((int) sysBp, (int) diaBp));
                
                vsCheckResultList.add(vsResult);
            }
        }
        
        if (bloodSugarCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalSugar = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalSugar = totalSugar + vs.getBloodSugar();
            }
            
            float sugar = totalSugar/request.getVitalSignsList().size();
            
            vsResult.setVsName("Blood Sugar");
            vsResult.setAvgValue(sugar);
            vsResult.setIsVsNormal(HelperMethods.checkIfSugarNormal(sugar));
            vsResult.setEffect(HelperMethods.checkIfSugarNormal(sugar) ? "Noraml" : "Abnormal");
            
            vsCheckResultList.add(vsResult);
        }
        
        if (respRateCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalRespRate = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalRespRate = totalRespRate + vs.getRespiratoryRate();
            }
            
            float respRate = totalRespRate/request.getVitalSignsList().size();
            
            FamilyMember member = (FamilyMember) request.getSender().getPerson();
            
            vsResult.setVsName("Respiratory Rate");
            vsResult.setAvgValue(respRate);
            vsResult.setIsVsNormal(HelperMethods.checkIfRespiRateNormal(member.getAge(), (int) respRate));
            vsResult.setEffect(HelperMethods.checkIfRespiRateNormal(member.getAge(), (int) respRate) ? "Noraml" : "Abnormal");
            
            vsCheckResultList.add(vsResult);
        }
        
        if (pulseCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalPulse = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalPulse = totalPulse + vs.getPulse();
            }
            
            float pulse = totalPulse/request.getVitalSignsList().size();
            
            FamilyMember member = (FamilyMember) request.getSender().getPerson();
            
            vsResult.setVsName("Pulse");
            vsResult.setAvgValue(pulse);
            vsResult.setIsVsNormal(HelperMethods.checkIfPulseNormal(member.getAge(), (int) pulse));
            vsResult.setEffect(HelperMethods.checkIfPulseNormal(member.getAge(), (int) pulse) ? "Noraml" : "Abnormal");
            
            vsCheckResultList.add(vsResult);
        }
        
        if (cholesterolCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalChol = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalChol = totalChol + vs.getCholesterol();
            }
            
            float cholesterol = totalChol/request.getVitalSignsList().size();
            
            FamilyMember member = (FamilyMember) request.getSender().getPerson();
            
            vsResult.setVsName("Cholesterol");
            vsResult.setAvgValue(cholesterol);
            vsResult.setIsVsNormal(HelperMethods.checkIfCholesterolNormal(cholesterol));
            vsResult.setEffect(HelperMethods.getCholesterolStatus(member.getGender(), cholesterol));
            
            vsCheckResultList.add(vsResult);
        }
        
        if (bmiCheck.isSelected()) {
            vsResult = new VitalSignCheckResult();
            float totalbmi = 0;
            
            for (VitalSign vs : request.getVitalSignsList()) {
                totalbmi = totalbmi + vs.getBmi();
            }
            
            float bmi = totalbmi/request.getVitalSignsList().size();
            
            vsResult.setVsName("BMI");
            vsResult.setAvgValue(bmi);
            vsResult.setIsVsNormal(HelperMethods.checkIfBmiNormal(bmi));
            vsResult.setEffect(HelperMethods.getBmiStatus(bmi));
            
            vsCheckResultList.add(vsResult);
        }
        
        return vsCheckResultList;
    }
    
    public ArrayList<NutrientsCheckResult> setAffectedNutrients() {
        ArrayList<NutrientsCheckResult> nutrientCheckList = new ArrayList<>();
        NutrientsCheckResult nCheckResult;
        
        if (energyCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalEnergy = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalEnergy = totalEnergy + fcd.getEnergy();
            }
            
            nCheckResult.setNutrientName("Energy");
            nCheckResult.setTotalIntake(totalEnergy);
            
            if (HelperMethods.getEnergyIntakeStatus(totalEnergy).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getEnergyIntakeStatus(totalEnergy).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);
        }
        
        if (protienCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalProtien = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalProtien = totalProtien + fcd.getProtien();
            }
            
            nCheckResult.setNutrientName("Protien");
            nCheckResult.setTotalIntake(totalProtien);
            
            if (HelperMethods.getProtienIntakeStatus(totalProtien).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getProtienIntakeStatus(totalProtien).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);    
        }
        
        if (fatCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalFat = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalFat = totalFat + fcd.getFat();
            }
            
            nCheckResult.setNutrientName("Fat");
            nCheckResult.setTotalIntake(totalFat);
            
            if (HelperMethods.getFatIntakeStatus(totalFat).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getFatIntakeStatus(totalFat).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);    
        }
        
        if (fibersCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalFibers = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalFibers = totalFibers + fcd.getFibers();
            }
            
            nCheckResult.setNutrientName("Fibers");
            nCheckResult.setTotalIntake(totalFibers);
            
            if (HelperMethods.getFibersIntakeStatus(totalFibers).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getFibersIntakeStatus(totalFibers).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (carboCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalCarbo = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalCarbo = totalCarbo + fcd.getCarbohydrates();
            }
            
            nCheckResult.setNutrientName("Carbohydrates");
            nCheckResult.setTotalIntake(totalCarbo);
            
            if (HelperMethods.getCarbohydratesIntakeStatus(totalCarbo).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getCarbohydratesIntakeStatus(totalCarbo).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (sugarCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalSugar = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalSugar = totalSugar + fcd.getSugar();
            }
            
            nCheckResult.setNutrientName("Sugar");
            nCheckResult.setTotalIntake(totalSugar);
            
            if (HelperMethods.getSugarIntakeStatus(totalSugar).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getSugarIntakeStatus(totalSugar).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (saltCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalSalt = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalSalt = totalSalt + fcd.getSalt();
            }
            
            nCheckResult.setNutrientName("Salt");
            nCheckResult.setTotalIntake(totalSalt);
            
            if (HelperMethods.getSaltIntakeStatus(totalSalt).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getSaltIntakeStatus(totalSalt).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (iodineCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalIodine = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalIodine = totalIodine + fcd.getIodine();
            }
            
            nCheckResult.setNutrientName("Iodine");
            nCheckResult.setTotalIntake(totalIodine);
            
            if (HelperMethods.getIodineIntakeStatus(totalIodine).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getIodineIntakeStatus(totalIodine).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (vitACheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitA = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitA = totalVitA + fcd.getVitaminA();
            }
            
            nCheckResult.setNutrientName("Vitamin A");
            nCheckResult.setTotalIntake(totalVitA);
            
            if (HelperMethods.getVitAIntakeStatus(totalVitA).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitAIntakeStatus(totalVitA).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);     
        }
        
        if (vitB12Check.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitB12 = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitB12 = totalVitB12 + fcd.getVitaminB12();
            }
            
            nCheckResult.setNutrientName("Vitamin B12");
            nCheckResult.setTotalIntake(totalVitB12);
            
            if (HelperMethods.getVitB12IntakeStatus(totalVitB12).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitB12IntakeStatus(totalVitB12).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);   
        }
        
        if (vitCCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitC = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitC = totalVitC + fcd.getVitaminC();
            }
            
            nCheckResult.setNutrientName("Vitamin C");
            nCheckResult.setTotalIntake(totalVitC);
            
            if (HelperMethods.getVitCIntakeStatus(totalVitC).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitCIntakeStatus(totalVitC).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);   
        }
        
        if (vitDCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitD = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitD = totalVitD + fcd.getVitaminD();
            }
            
            nCheckResult.setNutrientName("Vitamin D");
            nCheckResult.setTotalIntake(totalVitD);
            
            if (HelperMethods.getVitDIntakeStatus(totalVitD).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitDIntakeStatus(totalVitD).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);   
        }
        
        if (vitECheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitE = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitE = totalVitE + fcd.getVitaminE();
            }
            
            nCheckResult.setNutrientName("Vitamin E");
            nCheckResult.setTotalIntake(totalVitE);
            
            if (HelperMethods.getVitEIntakeStatus(totalVitE).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitEIntakeStatus(totalVitE).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);   
        }
        
        if (vitKCheck.isSelected()) {
            nCheckResult = new NutrientsCheckResult();
            float totalVitK = 0;
            
            for (FoodConsumptionDetail fcd : request.getFcdList()) {
                totalVitK = totalVitK + fcd.getVitaminK();
            }
            
            nCheckResult.setNutrientName("Vitamin K");
            nCheckResult.setTotalIntake(totalVitK);
            
            if (HelperMethods.getVitKIntakeStatus(totalVitK).equals(Constants.ABOVE_REQUIRED)) {
                nCheckResult.setIsAboveLevel(true);
                nCheckResult.setEffect("Intake exceeded the Normal Requirement!");
            }
            
            if (HelperMethods.getVitKIntakeStatus(totalVitK).equals(Constants.BELOW_REQUIRED)) {
                nCheckResult.setIsBelowLevel(true);
                nCheckResult.setEffect("Intake is less than the Normal Requirement!");
            }
            
            nutrientCheckList.add(nCheckResult);   
        }
        
        return nutrientCheckList;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel affectedNutrientsLbl;
    private javax.swing.JLabel affectedVsLbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JCheckBox bloodSugarCheck;
    private javax.swing.JCheckBox bmiCheck;
    private javax.swing.JCheckBox carboCheck;
    private javax.swing.JCheckBox cholesterolCheck;
    private javax.swing.JCheckBox diaBpCheck;
    private javax.swing.JCheckBox energyCheck;
    private javax.swing.JCheckBox fatCheck;
    private javax.swing.JLabel fcdLbl;
    private javax.swing.JTable fcdTable;
    private javax.swing.JCheckBox fibersCheck;
    private javax.swing.JCheckBox iodineCheck;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel msgLbl;
    private javax.swing.JLabel msgTxtLbl;
    private javax.swing.JCheckBox protienCheck;
    private javax.swing.JCheckBox pulseCheck;
    private javax.swing.JLabel requestDateLbl;
    private javax.swing.JLabel requestDtLbl;
    private javax.swing.JCheckBox respRateCheck;
    private javax.swing.JCheckBox saltCheck;
    private javax.swing.JLabel senderLbl;
    private javax.swing.JLabel senderNameLbl;
    private javax.swing.JButton submitResultsBtn;
    private javax.swing.JCheckBox sugarCheck;
    private javax.swing.JCheckBox sysBpCheck;
    private javax.swing.JCheckBox tempCheck;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton viewFcReport;
    private javax.swing.JButton viewVsReportBtn;
    private javax.swing.JCheckBox vitACheck;
    private javax.swing.JCheckBox vitB12Check;
    private javax.swing.JCheckBox vitCCheck;
    private javax.swing.JCheckBox vitDCheck;
    private javax.swing.JCheckBox vitECheck;
    private javax.swing.JCheckBox vitKCheck;
    private javax.swing.JTable vitalSignTable;
    private javax.swing.JLabel vsLbl;
    private javax.swing.JLabel welcomeLbl;
    private javax.swing.JLabel welcomeNameLbl;
    // End of variables declaration//GEN-END:variables
}
