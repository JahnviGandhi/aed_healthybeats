/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.healthanalystrole;

import business.Constants;
import business.enterprise.Enterprise;
import business.organization.HealthCareOrganization;
import business.organization.HouseHoldOrganization;
import business.organization.Organization;
import business.useraccount.UserAccount;
import business.workqueue.HealthCheckRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAHNVI
 */
public class LookUpNewRequestsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private HealthCareOrganization healthOrg;
    private UserAccount userAccount;
    /**
     * Creates new form LookUpNewRequests
     */
    public LookUpNewRequestsJPanel() {
        initComponents();
    }
    
    public LookUpNewRequestsJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.userAccount = userAccount;
        this.healthOrg = (HealthCareOrganization) this.organization;
        displayDetails();
    }

    public void displayDetails() {
        welcomeNameLbl.setText(welcomeNameLbl.getText().replace("<Name>", userAccount.getPerson().getFirstName() + " " + userAccount.getPerson().getLastName()));
        
        ArrayList<String> status = new ArrayList<>();
        status.add(Constants.REQUEST_PENDING);
        ArrayList<HealthCheckRequest> requests = (ArrayList) healthOrg.getWorkQueue().searchRequestByStatusOnly(status);
        
        populateRequestTable(requests);
    }
    
    public void populateRequestTable(ArrayList<HealthCheckRequest> requests) {
        DefaultTableModel dtm = (DefaultTableModel) healthCheckRequestTable.getModel();
        dtm.setRowCount(0);
        
         
        for (HealthCheckRequest request : requests) {
            Object row[] = new Object[4];
            row[0] = request.getRequestDate();
            row[1] = request;
            row[2] = request.getSender().getPerson().getFirstName();
            row[3] = request.getStatus();
            
            dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTxt = new javax.swing.JTextField();
        searchLbl = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        acceptRequestBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        healthCheckRequestTable = new javax.swing.JTable();
        requestLbl = new javax.swing.JLabel();
        welcomeNameLbl = new javax.swing.JLabel();
        welcomeLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        searchLbl.setText("Enter Sender Name to Search:");

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        acceptRequestBtn.setText("Accept The Respect");
        acceptRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptRequestBtnActionPerformed(evt);
            }
        });

        healthCheckRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request Date", "Message", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(healthCheckRequestTable);

        requestLbl.setText("New Requests:");

        welcomeNameLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        welcomeNameLbl.setText("<Name>!");

        welcomeLbl.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        welcomeLbl.setText("Welcome,");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLbl.setText("Health Analyst - Look Up New Requests");

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<<  Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(380, Short.MAX_VALUE)
                .addComponent(welcomeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeNameLbl)
                .addGap(115, 115, 115))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(searchLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(requestLbl)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(acceptRequestBtn)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(titleLbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcomeLbl)
                    .addComponent(welcomeNameLbl))
                .addGap(29, 29, 29)
                .addComponent(requestLbl)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(searchLbl)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn))
                .addGap(32, 32, 32)
                .addComponent(acceptRequestBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String searchInput = searchTxt.getText().trim();
        
        if (!searchInput.isEmpty()) {
            ArrayList<String> status = new ArrayList<>();
            status.add(Constants.REQUEST_PENDING);
            
            ArrayList<HealthCheckRequest> requests = (ArrayList) healthOrg.getWorkQueue().searchRequestBySender(searchInput, status);
            
            if (!requests.isEmpty()) {
                populateRequestTable(requests);
            }
            else {
                JOptionPane.showMessageDialog(null, "No pending requests from mentioned sender!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please enter sender name to search pending request!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<String> status = new ArrayList<>();
        status.add(Constants.REQUEST_PENDING);
        ArrayList<HealthCheckRequest> requests = (ArrayList) healthOrg.getWorkQueue().searchRequestByStatusOnly(status);
        
        populateRequestTable(requests);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void acceptRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptRequestBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = healthCheckRequestTable.getSelectedRow();
        
        if (selectedRow >= 0) {
            HealthCheckRequest request = (HealthCheckRequest) healthCheckRequestTable.getValueAt(selectedRow, 1);
            request.setReceiver(userAccount);
            request.setStatus(Constants.REQUEST_ASSIGNED);
            
            userAccount.getWorkQueue().addWorkRequest(request);
           
            ArrayList<String> status = new ArrayList<>();
            status.add(Constants.REQUEST_PENDING);
            ArrayList<HealthCheckRequest> requests = (ArrayList) healthOrg.getWorkQueue().searchRequestByStatusOnly(status);
        
            populateRequestTable(requests);
            
            JOptionPane.showMessageDialog(null, "Request assigned successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row to accept the request!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_acceptRequestBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptRequestBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTable healthCheckRequestTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel requestLbl;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel welcomeLbl;
    private javax.swing.JLabel welcomeNameLbl;
    // End of variables declaration//GEN-END:variables
}
