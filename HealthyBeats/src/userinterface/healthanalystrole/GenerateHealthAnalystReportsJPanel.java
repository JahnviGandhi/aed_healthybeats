/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.healthanalystrole;

import business.organization.Organization;
import business.useraccount.UserAccount;
import business.workqueue.HealthCheckRequest;
import java.awt.CardLayout;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author JAHNVI
 */
public class GenerateHealthAnalystReportsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private UserAccount userAccount;
    
    /**
     * Creates new form GenerateHealthAnalystReportsJPanel
     */
    public GenerateHealthAnalystReportsJPanel() {
        initComponents();
    }
    
    public GenerateHealthAnalystReportsJPanel(JPanel userProcessContainer, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.userAccount = userAccount;
        
        welcomeNameLbl.setText(welcomeNameLbl.getText().replace("<Name>", userAccount.getPerson().getFirstName() + " " + userAccount.getPerson().getLastName()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLbl = new javax.swing.JLabel();
        welcomeLbl = new javax.swing.JLabel();
        welcomeNameLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        viewMyAvgResponseTimeBtn = new javax.swing.JButton();
        avgResponseTimeToUserBtn = new javax.swing.JButton();
        viewTop3HealthyUsersAnalyzedBtn = new javax.swing.JButton();

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLbl.setText("Health Analyst - Generate Reports");

        welcomeLbl.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        welcomeLbl.setText("Welcome,");

        welcomeNameLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        welcomeNameLbl.setText("<Name>!");

        backBtn.setText("<<  Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewMyAvgResponseTimeBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewMyAvgResponseTimeBtn.setText("View My Average Reponse Time");
        viewMyAvgResponseTimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMyAvgResponseTimeBtnActionPerformed(evt);
            }
        });

        avgResponseTimeToUserBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        avgResponseTimeToUserBtn.setText("View My Average Response Time to User");
        avgResponseTimeToUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgResponseTimeToUserBtnActionPerformed(evt);
            }
        });

        viewTop3HealthyUsersAnalyzedBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewTop3HealthyUsersAnalyzedBtn.setText("View Top 3 Healthy Users Analyzed");
        viewTop3HealthyUsersAnalyzedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTop3HealthyUsersAnalyzedBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(backBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(174, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(avgResponseTimeToUserBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewMyAvgResponseTimeBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewTop3HealthyUsersAnalyzedBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titleLbl)
                            .addComponent(welcomeLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(welcomeNameLbl)))
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(titleLbl)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcomeLbl)
                    .addComponent(welcomeNameLbl))
                .addGap(67, 67, 67)
                .addComponent(viewMyAvgResponseTimeBtn)
                .addGap(52, 52, 52)
                .addComponent(avgResponseTimeToUserBtn)
                .addGap(52, 52, 52)
                .addComponent(viewTop3HealthyUsersAnalyzedBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewMyAvgResponseTimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMyAvgResponseTimeBtnActionPerformed
        // TODO add your handling code here:
        ViewMyAvgResponseTimeJPanel viewMyAvgResponseTimePanel = new ViewMyAvgResponseTimeJPanel(userProcessContainer, organization, userAccount);
        userProcessContainer.add("viewMyAvgResponseTimePanel", viewMyAvgResponseTimePanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewMyAvgResponseTimeBtnActionPerformed

    private void avgResponseTimeToUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgResponseTimeToUserBtnActionPerformed
        // TODO add your handling code here:
        generateAvgUserResponseTimeReport(userAccount);
    }//GEN-LAST:event_avgResponseTimeToUserBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewTop3HealthyUsersAnalyzedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTop3HealthyUsersAnalyzedBtnActionPerformed
        // TODO add your handling code here:
        ViewTopThreeHealthyUsersJPanel viewTopThreeHealthyUserPanel = new ViewTopThreeHealthyUsersJPanel(userProcessContainer, organization, userAccount);
        userProcessContainer.add("viewTopThreeHealthyUserPanel", viewTopThreeHealthyUserPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewTop3HealthyUsersAnalyzedBtnActionPerformed

    public void generateAvgUserResponseTimeReport(UserAccount ua) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        ArrayList<HealthCheckRequest> requests = (ArrayList) ua.getWorkQueue().getCompletedRequests();
        ArrayList<UserAccount> senders = new ArrayList<>();
        ArrayList<HealthCheckRequest> requestsBySender = new ArrayList<>();
        
        for (HealthCheckRequest request : requests) {
            if (!senders.contains(request.getSender())) {
                senders.add(request.getSender());
            }
        }
        
        if (!senders.isEmpty()) {
            for (UserAccount sender : senders) {
                requestsBySender = (ArrayList) userAccount.getWorkQueue().getCompletedRequestsForSender(sender);
                String senderName = sender.getPerson().getFirstName() + " " + sender.getPerson().getLastName();
                double avgResTime;
                double totResTime = 0;
                int count = requestsBySender.size();
                
                for (HealthCheckRequest req : requestsBySender) {
                    double responseTime = ((req.getResponseDate().getTime() - req.getRequestDate().getTime()) / (1000 * 60 * 60 * 24));  
                    totResTime = totResTime + responseTime;
                }
                
                avgResTime = totResTime/count;
                
                dataset.addValue(avgResTime, "Response Time", senderName);
            }
            
            JFreeChart chart = ChartFactory.createLineChart("Average Response Time For User", "Users", "Response Time", dataset);
            
            final CategoryPlot plot = chart.getCategoryPlot();
        
            LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
            DecimalFormat decimalFormat = new DecimalFormat("####.##");
            renderer.setShapesVisible(true);
            renderer.setItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}", decimalFormat));
            plot.setRenderer(renderer);
            renderer.setPositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.HALF_ASCENT_CENTER));
            renderer.setItemLabelsVisible(true);
            chart.getCategoryPlot().setRenderer(renderer);
        
            ChartFrame frame = new ChartFrame("Health Analyst - Average Response Time For User", chart);
            frame.setVisible(true);
            frame.setSize(650, 650);
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton avgResponseTimeToUserBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton viewMyAvgResponseTimeBtn;
    private javax.swing.JButton viewTop3HealthyUsersAnalyzedBtn;
    private javax.swing.JLabel welcomeLbl;
    private javax.swing.JLabel welcomeNameLbl;
    // End of variables declaration//GEN-END:variables
}
