/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.userrole;

import business.Constants;
import business.HelperMethods;
import business.enterprise.Enterprise;
import business.organization.HealthCareOrganization;
import business.organization.Organization;
import business.person.FamilyMember;
import business.useraccount.UserAccount;
import business.workqueue.HealthCheckRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAHNVI
 */
public class RequestHealthCheckJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private UserAccount userAccount;
    private FamilyMember member;
    
    /**
     * Creates new form RequestHealthCheckJPanel
     */
    public RequestHealthCheckJPanel() {
        initComponents();
    }
    
    public RequestHealthCheckJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.userAccount = userAccount;
        this.member = (FamilyMember) this.userAccount.getPerson();
        displayDetails();
    }

    public void displayDetails() {
        welcomeNameLbl.setText(welcomeNameLbl.getText().replace("<Name>", member.getFirstName() + " " + member.getLastName()));
        populateRequestTable((ArrayList) userAccount.getWorkQueue().getWorkRequestList());
    }
    
    public void populateRequestTable(ArrayList<HealthCheckRequest> requests) {
        DefaultTableModel dtm = (DefaultTableModel) healthCkeckRequestTable.getModel();
        dtm.setRowCount(0);
        
        for (int i = requests.size() - 1; i >= 0; i--) {
            Object row[] = new Object[5];
            
            row[0] = requests.get(i).getRequestDate();
            row[1] = requests.get(i);
            row[2] = requests.get(i).getReceiver() != null ? requests.get(i).getReceiver().getPerson().getFirstName() : "";
            row[3] = requests.get(i).getStatus();
            row[4] = requests.get(i).getResponseDate() != null ? requests.get(i).getResponseDate() : "";
            
            dtm.addRow(row);
        }
        
        /*
        for (HealthCheckRequest request : requests) {
            Object row[] = new Object[5];
            
            row[0] = request.getRequestDate();
            row[1] = request;
            row[2] = request.getReceiver() != null ? request.getReceiver().getPerson().getFirstName() : "";
            row[3] = request.getStatus();
            row[4] = request.getResponseDate() != null ? request.getResponseDate() : "";
            
            dtm.addRow(row);
        }
        
        */
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        titleLbl = new javax.swing.JLabel();
        welcomeLbl = new javax.swing.JLabel();
        welcomeNameLbl = new javax.swing.JLabel();
        healthCheckRequestLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        healthCkeckRequestTable = new javax.swing.JTable();
        searchLbl = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        viewDetailsBtn = new javax.swing.JButton();
        newRequestBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        searchCriteriaLbl = new javax.swing.JLabel();
        requestDateRadioBtn = new javax.swing.JRadioButton();
        receiverRadioBtn = new javax.swing.JRadioButton();
        pendingCheck = new javax.swing.JCheckBox();
        assignedCheck = new javax.swing.JCheckBox();
        completedCheck = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(204, 204, 204));

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(0, 102, 102));
        titleLbl.setText("User - Request Health Check");

        welcomeLbl.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        welcomeLbl.setForeground(new java.awt.Color(0, 102, 102));
        welcomeLbl.setText("Welcome,");

        welcomeNameLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        welcomeNameLbl.setForeground(new java.awt.Color(0, 102, 102));
        welcomeNameLbl.setText("<Name>!");

        healthCheckRequestLbl.setForeground(new java.awt.Color(0, 102, 102));
        healthCheckRequestLbl.setText("Health Check Requests:");

        jScrollPane1.setForeground(new java.awt.Color(0, 102, 102));

        healthCkeckRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request Date", "Message", "Receiver", "Status", "Response Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(healthCkeckRequestTable);
        if (healthCkeckRequestTable.getColumnModel().getColumnCount() > 0) {
            healthCkeckRequestTable.getColumnModel().getColumn(0).setResizable(false);
            healthCkeckRequestTable.getColumnModel().getColumn(1).setResizable(false);
            healthCkeckRequestTable.getColumnModel().getColumn(2).setResizable(false);
            healthCkeckRequestTable.getColumnModel().getColumn(3).setResizable(false);
            healthCkeckRequestTable.getColumnModel().getColumn(4).setResizable(false);
        }

        searchLbl.setForeground(new java.awt.Color(0, 102, 102));
        searchLbl.setText("Enter Key to Search:");

        searchTxt.setForeground(new java.awt.Color(0, 102, 102));

        searchBtn.setBackground(new java.awt.Color(153, 153, 153));
        searchBtn.setForeground(new java.awt.Color(0, 102, 102));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(153, 153, 153));
        clearBtn.setForeground(new java.awt.Color(0, 102, 102));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        cancelBtn.setBackground(new java.awt.Color(153, 153, 153));
        cancelBtn.setForeground(new java.awt.Color(0, 102, 102));
        cancelBtn.setText("Cancel Request");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        viewDetailsBtn.setBackground(new java.awt.Color(153, 153, 153));
        viewDetailsBtn.setForeground(new java.awt.Color(0, 102, 102));
        viewDetailsBtn.setText("View Request Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });

        newRequestBtn.setBackground(new java.awt.Color(153, 153, 153));
        newRequestBtn.setForeground(new java.awt.Color(0, 102, 102));
        newRequestBtn.setText("Request a New Health Check");
        newRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRequestBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(153, 153, 153));
        backBtn.setForeground(new java.awt.Color(0, 102, 102));
        backBtn.setText("<<  Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchCriteriaLbl.setForeground(new java.awt.Color(0, 102, 102));
        searchCriteriaLbl.setText("Select Search Criteria:");

        buttonGroup1.add(requestDateRadioBtn);
        requestDateRadioBtn.setForeground(new java.awt.Color(0, 102, 102));
        requestDateRadioBtn.setText("Request Date");
        requestDateRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDateRadioBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(receiverRadioBtn);
        receiverRadioBtn.setForeground(new java.awt.Color(0, 102, 102));
        receiverRadioBtn.setText("Receiver");
        receiverRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiverRadioBtnActionPerformed(evt);
            }
        });

        pendingCheck.setForeground(new java.awt.Color(0, 102, 102));
        pendingCheck.setText("Pending");

        assignedCheck.setForeground(new java.awt.Color(0, 102, 102));
        assignedCheck.setText("Assigned");

        completedCheck.setForeground(new java.awt.Color(0, 102, 102));
        completedCheck.setText("Completed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcomeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeNameLbl)
                .addGap(105, 105, 105))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(titleLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(healthCheckRequestLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(newRequestBtn)
                        .addGap(35, 35, 35)
                        .addComponent(viewDetailsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(searchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(searchCriteriaLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pendingCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(assignedCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(completedCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(requestDateRadioBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(receiverRadioBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titleLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcomeLbl)
                    .addComponent(welcomeNameLbl))
                .addGap(27, 27, 27)
                .addComponent(healthCheckRequestLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCriteriaLbl)
                    .addComponent(requestDateRadioBtn)
                    .addComponent(receiverRadioBtn))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pendingCheck)
                    .addComponent(assignedCheck)
                    .addComponent(completedCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLbl)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn)
                    .addComponent(clearBtn))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(viewDetailsBtn)
                    .addComponent(newRequestBtn))
                .addGap(59, 59, 59)
                .addComponent(backBtn)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = healthCkeckRequestTable.getSelectedRow();
        
        if (selectedRow >= 0) {
            HealthCheckRequest request = (HealthCheckRequest) healthCkeckRequestTable.getValueAt(selectedRow, 1);
                
            if (request.getStatus().equals(Constants.REQUEST_PENDING)) {
                int confirmButton = JOptionPane.YES_NO_OPTION;
            
                int confirmDelete = JOptionPane.showConfirmDialog(null, "Would you like to delete selected family member?", "Warning", confirmButton);
            
                if (confirmDelete == JOptionPane.YES_OPTION) {
                    userAccount.getWorkQueue().deleteWorkRequest(request);
                    
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof HealthCareOrganization) {
                            org.getWorkQueue().deleteWorkRequest(request);
                        }
                    }
                
                    JOptionPane.showMessageDialog(null, "Request canceled successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    populateRequestTable((ArrayList) userAccount.getWorkQueue().getWorkRequestList());
                } 
            }
            else {
                if(request.getStatus().equals(Constants.REQUEST_ASSIGNED)) {
                    JOptionPane.showMessageDialog(null, "Request cannot be canceled, it has aleady been assigned!", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    JOptionPane.showMessageDialog(null, "Request cannot be canceled, it has aleady been completed!", "Warning", JOptionPane.WARNING_MESSAGE);
                }              
            }
             
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row to cancel a request!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        searchTxt.setText("");
        populateRequestTable((ArrayList) userAccount.getWorkQueue().getWorkRequestList());
        receiverRadioBtn.setSelected(false);
        requestDateRadioBtn.setSelected(false);
        pendingCheck.setSelected(false);
        assignedCheck.setSelected(false);
        completedCheck.setSelected(false);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String searchInput = searchTxt.getText().trim();
        ArrayList<HealthCheckRequest> requests = new ArrayList();
        if (requestDateRadioBtn.isSelected() || receiverRadioBtn.isSelected()) {
            if (!searchInput.isEmpty()) {
                ArrayList<String> status = new ArrayList<>();
                
                if (pendingCheck.isSelected()) {
                    status.add(Constants.REQUEST_PENDING);
                }
                if (assignedCheck.isSelected()) {
                    status.add(Constants.REQUEST_ASSIGNED);
                }
                if (completedCheck.isSelected()) {
                    status.add(Constants.REQUEST_COMPLETED);
                }
               
                if (receiverRadioBtn.isSelected()) {
                    requests = (ArrayList) userAccount.getWorkQueue().searchRequestByReceiver(searchInput, status);
                    
                    if (requests != null) {
                        populateRequestTable(requests);
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "No requests found for mentioned receiver!", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else {
                    if (requestDateRadioBtn.isSelected() && HelperMethods.validateDate(searchInput)) {
                        DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
                        Date requestDate;
                        try {
                            requestDate = format.parse(searchInput);
                        }
                        catch (Exception e) {
                            requestDate = null;
                        }
                        
                        requests = (ArrayList) userAccount.getWorkQueue().searchRequestByDate(requestDate, status);
                        
                        if (requests != null) {
                            populateRequestTable(requests);
                        }
                        else {
                            JOptionPane.showMessageDialog(null, "No requests found for mentioned request date!", "Warning", JOptionPane.WARNING_MESSAGE);
                        }   
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "Please enter request date in MM/dd/yyyy format!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } 
            else {
                JOptionPane.showMessageDialog(null, "Please enter key to search!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a Search Criteria!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = healthCkeckRequestTable.getSelectedRow();
        
        if (selectedRow >= 0) {
            HealthCheckRequest request = (HealthCheckRequest) healthCkeckRequestTable.getValueAt(selectedRow, 1);
            
            ViewRequestDetailsJPanel viewReqDetailsPanel = new ViewRequestDetailsJPanel(userProcessContainer, userAccount, request);
            userProcessContainer.add("viewReqDetailsPanel", viewReqDetailsPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row to view details!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void newRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRequestBtnActionPerformed
        // TODO add your handling code here:
        RequestNewHealthCheckJPanel requestNewHealthCheckPanel = new RequestNewHealthCheckJPanel(userProcessContainer, enterprise, organization, userAccount, this);
        userProcessContainer.add("requestNewHealthCheckPanel", requestNewHealthCheckPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_newRequestBtnActionPerformed

    private void receiverRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiverRadioBtnActionPerformed
        // TODO add your handling code here:
        if (receiverRadioBtn.isSelected()) {
            pendingCheck.setEnabled(false);
        }
        else {
            pendingCheck.setEnabled(true);
        }
    }//GEN-LAST:event_receiverRadioBtnActionPerformed

    private void requestDateRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDateRadioBtnActionPerformed
        // TODO add your handling code here:
        if (requestDateRadioBtn.isSelected()) {
            pendingCheck.setEnabled(true);
        }
    }//GEN-LAST:event_requestDateRadioBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox assignedCheck;
    private javax.swing.JButton backBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JCheckBox completedCheck;
    private javax.swing.JLabel healthCheckRequestLbl;
    private javax.swing.JTable healthCkeckRequestTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newRequestBtn;
    private javax.swing.JCheckBox pendingCheck;
    private javax.swing.JRadioButton receiverRadioBtn;
    private javax.swing.JRadioButton requestDateRadioBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel searchCriteriaLbl;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton viewDetailsBtn;
    private javax.swing.JLabel welcomeLbl;
    private javax.swing.JLabel welcomeNameLbl;
    // End of variables declaration//GEN-END:variables
}
