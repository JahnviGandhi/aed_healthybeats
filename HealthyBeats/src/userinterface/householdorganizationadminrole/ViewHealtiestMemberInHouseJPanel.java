/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.householdorganizationadminrole;

import business.household.HouseHold;
import business.organization.HouseHoldOrganization;
import business.organization.Organization;
import business.person.FamilyMember;
import business.useraccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAHNVI
 */
public class ViewHealtiestMemberInHouseJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private UserAccount userAccount;
    private HouseHoldOrganization houseOrg;
    private FamilyMember healthiestMember;
    
    /**
     * Creates new form ViewHealtiestMemberInHouseJPanel
     */
    public ViewHealtiestMemberInHouseJPanel() {
        initComponents();
    }
    
    public ViewHealtiestMemberInHouseJPanel(JPanel userProcessContainer, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.userAccount = userAccount;
        this.houseOrg = (HouseHoldOrganization) this.organization;
        errorLbl.setVisible(false);
        displayDetails();
        
    }

    public void displayDetails() {
        welcomeMsg.setText(welcomeMsg.getText().replace("<Name>", userAccount.getPerson().getFirstName() + " " + userAccount.getPerson().getLastName()));
        
        bindHouseCombo();
    }
    
    public void bindHouseCombo() {
        houseHoldCombo.removeAllItems();
        
        for (HouseHold house : houseOrg.getHouseHoldDirectory().getHouseHoldDirectory()) {
            houseHoldCombo.addItem(house);
            
            getHealthiestMember(house);
        }
    }
    
    public void getHealthiestMember(HouseHold house) {
        
        float percentage = 0;
        float oldPercentage = 0;
        UserAccount ua = new UserAccount();
        
        ArrayList<FamilyMember> members = (ArrayList) house.getFamilyMembers().getPersonList();
        
        for (FamilyMember member : members) {
            for (UserAccount u : houseOrg.getUserAccountDirectory().getUserAccountDirectory()) {
                if (u.getPerson().equals(member)) {
                    ua = u;
                    break;
                }
            }
            
            percentage = ((ua.getWorkQueue().getCountForUnAffectedResults() * 100) / (ua.getWorkQueue().getCompletedRequests().size()));
                
            if (percentage > oldPercentage) {
                healthiestMember = member;
            }
                
            oldPercentage = percentage;
            
        }
        
        populateDetails(healthiestMember, house);
    }
    
    public void populateDetails(FamilyMember member, HouseHold house) {
        if (member != null) {
        
            DefaultTableModel dtm = (DefaultTableModel) memberTable.getModel();
            dtm.setRowCount(0);
        
            Object row[] = new Object[4];
            row[0] = member;
            row[1] = member.getLastName();
            row[2] = member.getAge();
            row[3] = house.getHeadOfTheFamily() == member.getPersonId() ? "Yes" : "No";
        
            dtm.addRow(row);
            errorLbl.setVisible(false);
        } 
        else {
            errorLbl.setText("None of the family members is healthy!");
            errorLbl.setVisible(true);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLbl = new javax.swing.JLabel();
        welcomeMsg = new javax.swing.JLabel();
        selectHouseLbl = new javax.swing.JLabel();
        houseHoldCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        memberTable = new javax.swing.JTable();
        healthiestMemberLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        errorLbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(740, 670));

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(0, 102, 102));
        titleLbl.setText("House Hold Organization Admin - View Healthiest Member in The House");

        welcomeMsg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        welcomeMsg.setForeground(new java.awt.Color(0, 102, 102));
        welcomeMsg.setText("Welcome, <Name>!");

        selectHouseLbl.setForeground(new java.awt.Color(0, 102, 102));
        selectHouseLbl.setText("Select House Hold:");

        houseHoldCombo.setForeground(new java.awt.Color(0, 102, 102));
        houseHoldCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        houseHoldCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseHoldComboActionPerformed(evt);
            }
        });

        jScrollPane1.setForeground(new java.awt.Color(0, 102, 102));

        memberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Head of The Family"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(memberTable);
        if (memberTable.getColumnModel().getColumnCount() > 0) {
            memberTable.getColumnModel().getColumn(0).setResizable(false);
            memberTable.getColumnModel().getColumn(1).setResizable(false);
            memberTable.getColumnModel().getColumn(2).setResizable(false);
            memberTable.getColumnModel().getColumn(3).setResizable(false);
        }

        healthiestMemberLbl.setForeground(new java.awt.Color(0, 102, 102));
        healthiestMemberLbl.setText("Healthiest Member:");

        backBtn.setBackground(new java.awt.Color(153, 153, 153));
        backBtn.setForeground(new java.awt.Color(0, 102, 102));
        backBtn.setText("<<  Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        errorLbl.setForeground(new java.awt.Color(255, 102, 102));
        errorLbl.setText("<Error Message>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcomeMsg)
                .addGap(126, 126, 126))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(titleLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(selectHouseLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(houseHoldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(healthiestMemberLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(errorLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(backBtn)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLbl)
                .addGap(34, 34, 34)
                .addComponent(welcomeMsg)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectHouseLbl)
                    .addComponent(houseHoldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(healthiestMemberLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(errorLbl)
                .addGap(67, 67, 67)
                .addComponent(backBtn)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void houseHoldComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseHoldComboActionPerformed
        // TODO add your handling code here:
        HouseHold house = (HouseHold) houseHoldCombo.getSelectedItem();
        
        if (house != null) {
            
        }
    }//GEN-LAST:event_houseHoldComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JLabel healthiestMemberLbl;
    private javax.swing.JComboBox houseHoldCombo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable memberTable;
    private javax.swing.JLabel selectHouseLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel welcomeMsg;
    // End of variables declaration//GEN-END:variables
}
